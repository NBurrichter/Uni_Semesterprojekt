<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_laser_cannon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_stopping_rockets</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defining variables

shooting_range = 3000;

//distance array for 4 lasers

for (var i = 0; i &lt; 4; i ++)
    {
    dist[i] = 0;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rotation &amp; Laser Collision

image_angle += 1;

for (var i = 0; i &lt; 4; i ++)
    {
    dist[i] = scr_distance_find(x,y,image_angle + (90*i),shooting_range,obj_parent_collision,false,true);
    
    if dist[i] != shooting_range
    then
    {
    part_particles_create(global.particle_system, x+lengthdir_x(dist[i],image_angle+(90*i)), y+lengthdir_y(dist[i],image_angle+(90*i)), global.particle_laser, 2);
    }
    
    if collision_line(x, y, x+lengthdir_x(dist[i],image_angle+(90*i)), y+lengthdir_y(dist[i],image_angle+(90*i)), obj_player, false, false) &gt; 0
        then
        {
        if !obj_player.invincible
            then
            {
            audio_play_sound(snd_laser_damage,2,false);
            obj_player.alarm[0] = 20;
            scr_lose ();
            obj_player.invincible = true;
            //obj_player.h_speed *= -1;
            //obj_player.v_speed *= -1;
            instance_create(obj_player.x,obj_player.y,obj_damage_unlock)
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw laser
for (var i = 0; i &lt; 4; i ++)
    {
    draw_sprite_ext (spr_lazorss,0,x,y,dist[i],1,image_angle+(90*i),c_white,1);
    }

//draw

draw_sprite_ext (spr_laser_cannon,-1,x,y,1,1,image_angle,c_white,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
