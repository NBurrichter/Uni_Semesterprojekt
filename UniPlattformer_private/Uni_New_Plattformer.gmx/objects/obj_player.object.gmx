<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up variables

global.player_id = id;

///player behaviour variables

on_ground = false;
double_jump = 0;

running_jump_height = 0.0;


///jumping
jump_frames = 0;
jump_frames_duration = 4;

normal_jump_height = 14;
wall_jump_distance = 8;

max_drop_speed = 20;

stuck_to_the_wall = false;
frames_stuck_to_wall = 3;
sticking_to_the_wall_timer = frames_stuck_to_wall;

acceleration = 1;
fric = 0.1;
max_speed = 8;

h_speed = 0;
v_speed = 0;

dir = 1;

grav = 0;
amount_of_gravity = 1;

screen_shake_intensity = 6;

//ability switches

can_double_jump = false;
can_wall_jump = true;

//Sprite speed
image_speed = 0.6;
upStill = false;
downStill = false;
slideStill = false;

//invincible frames
invincible = false;
flicker = 1;

//Turning maxspeed on and off
bumped = false;
jumpBlock = false;

nearBlock = 0;

hit = false;

on_block4 = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///invincibility frames
invincible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = floor(x);
y = floor(y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//key_variables

var left_key = keyboard_check(ord('A'));          
var right_key = keyboard_check(ord('D'));        

if keyboard_check_pressed(vk_space) 
    then
    {
    jump_frames = jump_frames_duration;
    }

if jump_frames &gt; 0
    then
    {
    jump_frames -= 1;
    var jump_key_just_pressed = true;
    }
else
    {
    var jump_key_just_pressed = false;
    }
    
var jump_key_not_pressed = !keyboard_check(vk_space);

// var jump_key_just_pressed = gamepad_button_check_pressed(scr_gamepad_get_first_connected(),gp_face1);

//cancel each if left right pressed

if (left_key) &amp;&amp; (right_key)                  
    {
    left_key = 0;                           
    right_key = 0;   
    } 
    
//on_ground &amp;&amp; reactivating double_jump

if !place_meeting(x,y+1,obj_parent_collision)
    then
    {
    on_ground = false;
    }
else
{
if on_ground = false
    then
    {
    global.screen_shake = screen_shake_intensity;
    on_ground = true;
    }
stuck_to_the_wall = 0;
double_jump = 0;
//bumped = false;
}   

//acceleration...

if left_key
    then
    {
    h_speed -= acceleration;
    dir = -1;
    }
    
if right_key
    then
    {
    h_speed += acceleration;
    dir = +1;
    }
    
//jumping //double_jumping //wall_jumping

if (jump_key_just_pressed) or jumpBlock     // jumping and jumping if on Jumpblock
    then
    {
    if on_ground = true
        then
        {
        jump_frames = 0;      
        //sprite_index = spr_player_jump_up;
        
        v_speed = -(normal_jump_height + running_jump_height*abs(h_speed));  //Add upward movement + move_speed;      
        }
    else                                        // wall_jumping
        {
        if can_wall_jump = true //////////////////////////////////////////switch
            then
            {
            if place_meeting(x+dir,y,obj_parent_collision)            
                then
                {
                jump_frames = 0;
                
                v_speed = -normal_jump_height;
                h_speed = wall_jump_distance*(-dir);
                dir = dir*(-1);
                }
            else                                    // double_jump
                {
                if can_double_jump = true ////////////////////////////////switch
                    then
                    {
                    if double_jump = 0 
                        then
                        {
                        double_jump = 1;
                        v_speed = -normal_jump_height;
                        }
                    }
                }
            }   
        }
    }
    
//only when not max_speed
    
if h_speed &gt; max_speed 
    if !bumped
        then
        {
        h_speed = max_speed;
        }
    
if h_speed &lt; -max_speed 
    if !bumped
        then
        {
        h_speed = -max_speed;
        }
        
if instance_exists(obj_second_player_block2)
    then
    {
    if h_speed &gt; obj_second_player_block2.h_jump
        then
        {
        h_speed = obj_second_player_block2.h_jump;
        }
    if h_speed &lt; -obj_second_player_block2.h_jump
        then
        {
        h_speed = -obj_second_player_block2.h_jump;
        }
    }
            
//turning gravitiy on and off

if on_ground = false
    then
    {
    grav = amount_of_gravity;
    v_speed += grav; 
    }
    else
        {
        grav = 0;
        if v_speed &gt; 0
            then
            {
            v_speed = 0;
            } 
        }

//not pressing jump key results in smaller jumps

if (jump_key_not_pressed) and v_speed &lt; 0
    then
    {
    v_speed += 1;
    }

//bumping your head on ceiling
    
if place_meeting(x,y-1,obj_parent_collision) and v_speed &lt; 0
    then
    {
    v_speed = 0;                                
    }

//wall_sliding

if on_ground = false
    then
    {
    if place_meeting(x+(dir),y,obj_parent_collision)
        then
        {
        double_jump = 0;
        if v_speed &gt; 0 
            then
            {
            if stuck_to_the_wall = false
                then
                {
                stuck_to_the_wall = true;
                sticking_to_the_wall_timer = frames_stuck_to_wall;
                }
            }
        max_drop_speed = 3;
        }
    else
        {
        stuck_to_the_wall = false;
        max_drop_speed = 20;
        }
    } 
    
if sticking_to_the_wall_timer &gt; 0
    then
    {
    sticking_to_the_wall_timer -= 1;
    max_drop_speed = 0;
    }           
     
if v_speed &gt; max_drop_speed                             
    then
    {
    v_speed = max_drop_speed;
    }          

//if on block4    
if place_meeting(x,y+1,obj_second_player_block4)
    then
    {
    on_block4 = true;
    }
    else
    {
    on_block4 = false;
    }
    
//deceleration

if !(left_key)
    then
    {
    if h_speed &lt; 0
        then
        {
        if on_ground = true
            then
            {
            if !on_block4
                h_speed = 0;       
            }
        else
            {
            h_speed += fric
            }
        }
    } 
    
if !(right_key)
    then
    {
    if h_speed &gt; 0
        then
        {
        if on_ground = true
            then
            {
            if !on_block4
                h_speed = 0;       
            }
        else
            {
            h_speed -= fric;
            }
        }
    }   
      
//actual horizontal movement with collision

repeat abs(h_speed)           
    {
    if h_speed &gt; 0              
        then
        {
        if !place_meeting(x+1,y,obj_parent_collision)
            then
            {
            x += 1;            
            }
        else
            {
            h_speed = 0;
            }
        }                
    if h_speed &lt; 0               
        then
        {
        if !place_meeting(x-1,y,obj_parent_collision)
            then
            {
            x -= 1;
            }
        else
            {
            h_speed = 0;
            }
        }
    }   

//actual vertical movement with collision

repeat abs(v_speed)   //falling down
    {
    if v_speed &gt; 0 
        then
        {
        if !place_meeting(x,y+1,obj_parent_collision)
            then
            {
            y += 1;   
            }
        }
        
    if v_speed &lt; 0  // jumping up           
        then
        {
        if !place_meeting(x,y-1,obj_parent_collision)
            then
            {
            y -= 1;          
            }
        }
    }

//Magnet
if instance_exists(obj_second_player_block3)
    then
    {
    if point_distance(x,y,obj_second_player_block3.x,obj_second_player_block3.y) &lt; obj_second_player_block3.radius
        then
        {
        bumped = true;
        //on_ground = false;
        nearBlock = point_distance(x,y,obj_second_player_block3.x,obj_second_player_block3.y)
        h_dist = obj_second_player_block3.x-x;
        v_dist = obj_second_player_block3.y-y;
        
        if v_dist &gt; 0
            then
            {
            v_speed += (obj_second_player_block3.radius-v_dist)*obj_second_player_block3.attractionPower;
            }
        if v_dist &lt; 0
            then
            {
            v_speed -= (obj_second_player_block3.radius+v_dist)*obj_second_player_block3.attractionPower;
            }
        
        if h_dist &gt; 0
            then
            {
            h_speed += (obj_second_player_block3.radius-h_dist)*obj_second_player_block3.attractionPower;
            }
        if h_dist &lt; 0
            then
            {
            h_speed -= (obj_second_player_block3.radius+h_dist)*obj_second_player_block3.attractionPower;
            }       
        }
        else
        {

        }
    }   

//magnet second player    
/*
if instance_exists(obj_second_player_block3)
    then
    {
    if point_distance(x,y,obj_second_player.x,obj_second_player.y) &lt; obj_second_player_block3.radius
        then
        {
        bumped = true;
        on_ground = false;
        nearBlock = point_distance(x,y,obj_second_player.x,obj_second_player.y)
        h_dist = obj_second_player.x-x;
        v_dist = obj_second_player.y-y;
        
        if v_dist &gt; 0
            then
            {
            v_speed += (obj_second_player_block3.radius-v_dist)*obj_second_player_block3.attractionPower;
            }
        if v_dist &lt; 0
            then
            {
            v_speed -= (obj_second_player_block3.radius+v_dist)*obj_second_player_block3.attractionPower;
            }
        
        if h_dist &gt; 0
            then
            {
            h_speed += (obj_second_player_block3.radius-h_dist)*obj_second_player_block3.attractionPower;
            }
        if h_dist &lt; 0
            then
            {
            h_speed -= (obj_second_player_block3.radius+h_dist)*obj_second_player_block3.attractionPower;
            }       
        }
        else
        {

        }
    }
*/
 
//left right collision with blocks
if place_meeting(x+1+hspeed,y,obj_parent_block)
    then
    {
    hit = true;
    hspeed = 0;
    }
    else
    if place_meeting(x-1-hspeed,y,obj_parent_block)
        then
        {
        hit = true;
        hspeed = 0;
        }
        else
        {
        hit = false;
        }

if instance_exists(obj_second_player_block4)
    then
    {
    if place_meeting(x+1,y,obj_second_player_block4)
        then
        {
        hspeed = 0;
        }
    if place_meeting(x-1,y,obj_second_player_block4)
        then
        {
        hspeed = 0;
        }
    }
       
//bumper set back
if h_speed &lt; max_speed and h_speed &gt; -max_speed
    then
    {
    bumped = false;
    }

//JumpBlock set back
if jumpBlock 
    then
    {
    jumpBlock = false;
    }
    
//Sprites 
//Fallen
if (v_speed &gt; 0) 
    then
    {
    upStill = false;
    slideStill = false;
    if stuck_to_the_wall
        then
        {
        sprite_index = spr_player_wall_down; 
        }
        else
        {
        if !downStill
            then
            {
            sprite_index = spr_player_fall_down; 
            }
         
        if image_index &gt; image_number -1
            then
            {
            sprite_index = spr_player_fall_down_still;
            downStill = true;
            }
        } 
   }

//Springen   
if v_speed &lt; 0
    then
    {
    downStill = false;
    
    if place_meeting(x+(dir),y,obj_parent_collision)
        then
        {
        if !slideStill
            then 
            {
            sprite_index = spr_player_wall_up;
            }
        
        
        if image_index &gt; image_number -1
            then
            {
            sprite_index = spr_player_wall_down;
            slideStill = true;
            }
           
        }
        else
        {
        if !upStill
            then
            {
            sprite_index = spr_player_jump_up;
            }
        
        if image_index &gt; image_number -1
            then
            {
            sprite_index = spr_player_jump_up_still;
            upStill = true;
            }
        }
    }     

if v_speed = 0
    if stuck_to_the_wall
    then
    {
    sprite_index = spr_player_wall_down;
    }    
    
//laufen
if on_ground = true
    then
    {
    //if left_key or right_key
    if h_speed != 0
        then
        {
        sprite_index = spr_player;
        }
    else
        {
        sprite_index = spr_player_standing;
        }
    }  

//magnet
if instance_exists(obj_second_player_block3)
    then
    {   
    if point_distance(x,y,obj_second_player_block3.x,obj_second_player_block3.y) &lt; obj_second_player_block3.radius and !on_ground
        then
        {
        sprite_index = spr_player_fall_down_still
        }
    if point_distance(x,y,obj_second_player_block3.x,obj_second_player_block3.y) &lt; obj_second_player_block3.radius and on_ground
        then
        {
        sprite_index = spr_player_standing
        }
    }
    
//standing on Block4
if place_meeting(x,y+1,obj_second_player_block4) and h_speed = obj_second_player_block4.hspeed
    then
    {
    sprite_index = spr_player_standing;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///whirl up dust when walking

if sprite_index = spr_player
    then
    {
    if abs(h_speed) = max_speed
        then
        {
        part_particles_create(global.particle_system, x + (sprite_width/2)*(-dir), y + sprite_height/2, global.particle_dust, 1);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_unlock_2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if obj_second_player.unlocked2 = false
    then
    {
    obj_second_player.unlocked2 = true;
    }
    else
    {
    if obj_second_player.unlocked3 = false
        then
        {
        obj_second_player.unlocked3 = true;
        }
        else
        {
        if obj_second_player.unlocked4 = false
            then
            {
            obj_second_player.unlocked4 = true;
            }
        }
    }

with (other)
    {
    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parent_damage_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death

if !invincible
    then
    {
    alarm[0] = 20;
    scr_lose ();
    invincible = true;
    if h_speed &lt; 0
        then
        {
        h_speed = max_speed;
        }
    if h_speed &gt; 0
        then
        {
        h_speed = -max_speed;
        }
    v_speed *= -1;
    instance_create(x,y,obj_damage_unlock);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death

obj_second_player.unlocked4 = false;
obj_second_player.unlocked3 = false;
obj_second_player.unlocked2 = false;

scr_lose ();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self

//draw_self ();
if !invincible
    then
    {
    draw_sprite_ext(sprite_index,image_index,x,y,dir,1,0,-1,1);
    }
    else
    {
    draw_sprite_ext(sprite_index,image_index,x,y,dir,1,0,-1,flicker);
    flicker *= -1;
    }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debugging

/*
draw_set_colour (c_black);

//scr_gamepad_debug_message();


draw_text (x,y+25,"h_speed: "+string(obj_player.h_speed));

draw_text (x,y+40,"grav: "+string(obj_player.grav));
draw_text (x,y-5,"v_speed: "+string(obj_player.v_speed));

draw_text (x,y+55,"stuck_to_the_wall: "+string(stuck_to_the_wall));
draw_text (x,y+70,"sticking_to_the_wall_timer: "+string(sticking_to_the_wall_timer));
draw_text (x,y+85,"screen_shake: "+string(global.screen_shake));
draw_text (x,y+110,"dir: "+string(obj_player.dir));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
