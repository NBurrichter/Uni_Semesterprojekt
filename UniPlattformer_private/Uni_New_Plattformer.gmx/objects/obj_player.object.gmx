<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up variables

global.player_id = id;

on_ground = false;
double_jump = 0;

running_jump_height = 0.0;

normal_jump_height = 13;
wall_jump_distance = 8;

max_drop_speed = 20;

stuck_to_the_wall = false;
frames_stuck_to_wall = 3;
sticking_to_the_wall_timer = frames_stuck_to_wall;

acceleration = 1;
fric = 0.1;
max_speed = 8;

h_speed = 0;
v_speed = 0;

dir = 1;

grav = 0;
amount_of_gravity = 1;

//ability switches

can_double_jump = false;
can_wall_jump = false;

//Sprite speed
image_speed = 0.75;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//key_variables

var left_key = keyboard_check(ord('A'))          
var right_key = keyboard_check(ord('D'))        

var jump_key_just_pressed = keyboard_check_pressed(vk_space)
var jump_key_not_pressed = !keyboard_check(vk_space) 

//cancel each if left right pressed

if (left_key) &amp;&amp; (right_key)                  
    {
    left_key = 0;                           
    right_key = 0;   
    } 
    
//on_ground &amp;&amp; reactivating double_jump

if !place_meeting(x,y+1,obj_parent_collision)
    then
    {
    on_ground = false;
    }
else
{
on_ground = true;
double_jump = 0;
}   

//acceleration...

if left_key
    then
    {
    h_speed -= acceleration;
    dir = -1;
    }
    
if right_key
    then
    {
    h_speed += acceleration;
    dir = +1;
    }
    
//jumping //double_jumping //wall_jumping

if (jump_key_just_pressed)      // jumping
    then
    {
    if on_ground = true
        then
        {
        v_speed = -(normal_jump_height + running_jump_height*abs(h_speed));  //Add upward movement + move_speed;      
        }
    else                                        // wall_jumping
        {
        if can_wall_jump = true //////////////////////////////////////////switch
            then
            {
            if place_meeting(x+dir,y,obj_parent_collision)             
                then
                {
                v_speed = -normal_jump_height;
                h_speed = wall_jump_distance*(-dir);
                dir = dir*(-1);
                }
            else                                    // double_jump
                {
                if can_double_jump = true ////////////////////////////////switch
                    then
                    {
                    if double_jump = 0 
                        then
                        {
                        double_jump = 1;
                        v_speed = -normal_jump_height;
                        }
                    }
                }
            }   
        }
    }
    
//only when not max_speed
    
if h_speed &gt; max_speed
    then
    {
    h_speed = max_speed;
    }
    
if h_speed &lt; -max_speed
    then
    {
    h_speed = -max_speed;
    }
            
//turning gravitiy on and off

if on_ground = false
    then
    {
    grav = amount_of_gravity;
    v_speed += grav; 
    }
    else
        {
        grav = 0;
        if v_speed &gt; 0
            then
            {
            v_speed = 0;
            } 
        }

//not pressing jump key results in smaller jumps

if (jump_key_not_pressed) and v_speed &lt; 0
    then
    {
    v_speed += 1;
    }

//bumping your head on ceiling
    
if place_meeting(x,y-1,obj_parent_collision) and v_speed &lt; 0
    then
    {
    v_speed = 0;                                
    }

//wall_sliding

if on_ground = false
    then
    {
    if place_meeting(x+(dir),y,obj_parent_collision)
        then
        {
        double_jump = 0;
        if stuck_to_the_wall = false
            then
            {
            stuck_to_the_wall = true;
            sticking_to_the_wall_timer = frames_stuck_to_wall;
            }
        max_drop_speed = 3;
        }
    else
        {
        stuck_to_the_wall = false;
        max_drop_speed = 20;
        }
    } 
    
if sticking_to_the_wall_timer &gt; 0
    then
    {
    sticking_to_the_wall_timer -= 1;
    max_drop_speed = 0;
    }           
     
if v_speed &gt; max_drop_speed                             
    then
    {
    v_speed = max_drop_speed;
    }          

//deceleration

if !(left_key)
    then
    {
    if h_speed &lt; 0
        then
        {
        if on_ground = true
            then
            {
            h_speed = 0;       
            }
        else
            {
            h_speed += fric
            }
        }
    } 
    
if !(right_key)
    then
    {
    if h_speed &gt; 0
        then
        {
        if on_ground = true
            then
            {
            h_speed = 0;       
            }
        else
            {
            h_speed -= fric;
            }
        }
    }   
      
//actual horizontal movement with collision

repeat abs(h_speed)           
    {
    if h_speed &gt; 0              
        then
        {
        if !place_meeting(x+1,y,obj_parent_collision)
            then
            {
            x += 1;            
            }
        else
            {
            h_speed = 0;
            }
        }                
    if h_speed &lt; 0               
        then
        {
        if !place_meeting(x-1,y,obj_parent_collision)
            then
            {
            x -= 1;
            }
        else
            {
            h_speed = 0;
            }
        }
    }   

//actual vertical movement with collision

repeat abs(v_speed)   //falling down
    {
    if v_speed &gt; 0 
        then
        {
        if !place_meeting(x,y+1,obj_parent_collision)
            then
            {
            y += 1;   
            }
        }
        
    if v_speed &lt; 0  // jumping up           
        then
        {
        if !place_meeting(x,y-1,obj_parent_collision)
            then
            {
            y -= 1;          
            }
        }
    }

    
//Sprites 
//wechsel zwischen stehen und laufen
if on_ground = true
    then
    {
    if left_key or right_key
        then
        {
        sprite_index = spr_player;
        }
    else
        {
        sprite_index = spr_player_standing;
        }
    }









</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Changing sprite

image_xscale = dir; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parent_damage_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death

scr_lose ();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death

scr_lose ();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self

draw_self ();



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debugging
/*
draw_set_colour (c_black);

draw_text (x,y+10,"on_ground: "+string(obj_player.on_ground));
draw_text (x,y+25,"h_speed: "+string(obj_player.h_speed));

draw_text (x,y+40,"grav: "+string(obj_player.grav));
draw_text (x,y-5,"v_speed: "+string(obj_player.v_speed));

draw_text (x,y+55,"double_jump: "+string(obj_player.double_jump));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
