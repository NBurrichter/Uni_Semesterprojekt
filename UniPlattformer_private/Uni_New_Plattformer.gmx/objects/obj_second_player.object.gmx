<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playertwo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables

selectMode = false;
mousePointer = 0;
mouseArea = 0;

//HuD
hudTimer = 0;
hudTimerInc = 0.25;
margin = 65;
maxTimer = 1;

unlocked1 = true;
unlocked2 = false;
unlocked3 = false;
unlocked4 = false;

color = c_white;

left_pressed = false;
un_left_pressed = false;

maxtime = 1;
decay = 0.2;
time = 0;

un_maxtime = 1;
un_decay = 0.1;
un_time = 0;

/// select mode
xfactor = screen_width/1600;
yfactor = screen_height/900;
select_mode_x = x;
select_mode_y = y;

// custom speed variables
/*
v_speed = 0;
h_speed = 0;

rotation_force = 0;
rotation_decay = 0;
rotation = 0;
rotation_decay_time = 10;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///angle for drawing

own_speed = point_distance (xprevious, yprevious, x, y);

direction = point_direction(xprevious, yprevious, x, y);

image_angle = lerp(image_angle, direction, max(0.1,min(1,0.1*own_speed)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selectmode: Wechsel zwische Auswahlrad und normaler bewegung
if mouse_check_button_pressed(mb_right)
    then
    {
    selectMode = true;
    hudTimer = 0;
    mouseArea = 0;
    y++;
    select_mode_x = x;
    select_mode_y = y;
    }

//Bestimmen der Position der Mouse in relation zum zweiten Spieler sprite
if selectMode{
mousePointer = point_direction(x, y, mouse_x, mouse_y);//Bestimmt per Gradzahl, in welchem quadranten sich die maus befindet
//up
if mousePointer &gt;= 45 and mousePointer &lt; 135 and unlocked1
    then
    {
    mouseArea = 0;
    }
//right
if ((mousePointer &gt;= 0 and mousePointer &lt; 45) or (mousePointer &gt;= 315 and mousePointer &lt; 360)) and unlocked2
    then
    {
    mouseArea = 1;
    }
//down
if mousePointer &gt;= 255 and mousePointer &lt; 315 and unlocked3
    then
    {
    mouseArea = 2;
    }
//left
if mousePointer &gt;= 135 and mousePointer &lt; 255 and unlocked4
    then
    {
    mouseArea = 3;
    }    
}
 
///mouse_position in grid - moves only if not in select mode    
if !selectMode then
    {
    x = mouse_x//floor(mouse_x/32)*32;
    y = mouse_y//floor(mouse_y/32)*32;
    }

if time &gt; 0
    {
    time -= decay;
    }else{
    left_pressed = false;
    }
    
if un_time &gt; 0
    {
    un_time -= un_decay;
    }else{
    un_left_pressed = false;
    }

//Beenden des select Modes 
if mouse_check_button_released(mb_right)
    then
    {    
    window_mouse_set((select_mode_x-view_xview[0])*xfactor,(select_mode_y-view_yview[0])*yfactor);
    selectMode = false;
    }
         

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stumble when space is occupied


    if place_meeting(x,y,all)
        then
        {
        if mouse_check_button_pressed (mb_left)
            {
            un_left_pressed = true;
            un_time = un_maxtime;
            }
        }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create the different blocks  
//1 jumping 3

if mouseArea = 1
    {
if !place_meeting (x,y,all)
    then
    {
    block = instance_create (x,y,obj_second_player_block2);
    part_particles_create_colour(global.particle_system, x, y, global.particle_block, c_purple, 1);
    left_pressed = true;
    time = maxtime;
    }
else
    {   
    global.screen_shake = 0.5;         
    }
    }

if instance_number (obj_second_player_block2) &gt; 3
    then
    {
    with (instance_find(obj_second_player_block2, 0))
        {
        instance_destroy();
        }
    }
    
    
//3
if mouseArea = 2
{
if !place_meeting (x,y,all)
    then
    {
    block = instance_create (x,y,obj_second_player_block3);
    part_particles_create_colour(global.particle_system, x, y, global.particle_block, c_orange, 1);
    left_pressed = true;
    time = maxtime;
    }
else
    {   
    global.screen_shake = 0.5;         
    }
}

if instance_number (obj_second_player_block3) &gt; 1
    then
    {
    with (instance_find(obj_second_player_block3, 0))
        {
        instance_destroy();
        }
    }
    
//4 
if mouseArea = 3
{
if !place_meeting (x,y,all)
    then
    {
    block = instance_create (x,y,obj_second_player_block4);
    part_particles_create_colour(global.particle_system, x, y, global.particle_block, c_green, 1);
    left_pressed = true;
    time = maxtime;
    }
else
    {   
    global.screen_shake = 0.5;         
    }
    }

if instance_number (obj_second_player_block4) &gt; 3
    then
    {
    with (instance_find(obj_second_player_block4, 0))
        {
        instance_destroy();
        }
    }
//play sound
audio_play_sound (snd_build_blocks,1,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//0 fadeing 9
if mouseArea = 0
    {
    if !place_meeting (x,y,all)
        then
        {
        block = instance_create (x,y,obj_second_player_block1);
        part_particles_create_colour(global.particle_system, x, y, global.particle_block, c_blue, 1);
        left_pressed = true;
        time = maxtime;
        }
    else
        {
        if mouse_check_button_pressed (mb_left)
            then
            {
            global.screen_shake = 0.5;
            } 
        }
    }
    
if instance_number (obj_second_player_block1) &gt; 9
    then
    {
    with (instance_find(obj_second_player_block1, 0))
        {
        instance_destroy();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw trail according to chosen block

switch (mouseArea)
    {
    case 0:
    scr_draw_trail(8,sprite_width,c_aqua,-1,true,0.3);
    scr_draw_trail(8,sprite_width/2,c_blue,-1,true,0.5); break;
    case 1:
    scr_draw_trail(8,sprite_width,c_fuchsia,-1,true,0.3);
    scr_draw_trail(8,sprite_width/2,c_purple,-1,true,0.5); break;
    case 2:
    scr_draw_trail(8,sprite_width,c_yellow,-1,true,0.3);
    scr_draw_trail(8,sprite_width/2,c_orange,-1,true,0.5); break;
    case 3:
    scr_draw_trail(8,sprite_width,c_lime,-1,true,0.3);
    scr_draw_trail(8,sprite_width/2,c_green,-1,true,0.5); break;
    }

//draw squashed and stretched depending on speed

if !left_pressed and !un_left_pressed
    then
    {
    draw_sprite_ext(spr_playertwo, 0 ,x ,y ,1 + max(0,(own_speed-6)/100), max(0.3, 1 - (own_speed-6)/100), image_angle, c_white, 1);
    }

    
if un_left_pressed
    {
    draw_sprite_ext(spr_playertwo,0,x+random(10)-5,y+random(2)-1, 1 + max(0,(own_speed-6)/100), max(0.3, 1 - (own_speed-6)/100), image_angle, c_white,1);
    } 

         
if left_pressed
    {
    draw_sprite_ext(spr_playertwo,0,x,y, (1+(time/1.5)) + max(0,(own_speed-6)/100), max((1+(time/1.5))*0.1, (1+(time/1.5)) - (own_speed-6)/100) , image_angle, c_white, 1);  
    }
        
   
    
//Hud creation Timer
if hudTimer &lt; maxTimer
    then
    {
    hudTimer += hudTimerInc;
    }

//Max Hud cretion time
if hudTimer &gt; maxTimer
    then   
    {
    hudTimer = maxTimer;
    }

//---Drawing des select HUDs---
if selectMode
    then
    {
       //Drawing des Huds, wenn freigeschalten
       if unlocked1 then draw_sprite_ext(spr_block_select,0,x,y,1*hudTimer,1*hudTimer,0,-1,1);
       if unlocked2 then draw_sprite_ext(spr_block_select,0,x,y,1*hudTimer,1*hudTimer,270,-1,1);
       if unlocked3 then draw_sprite_ext(spr_block_select,0,x,y,1*hudTimer,1*hudTimer,180,-1,1);
       if unlocked4 then draw_sprite_ext(spr_block_select,0,x,y,1*hudTimer,1*hudTimer,90,-1,1);
      
       //Drawing der Blöcke
       if unlocked1 then draw_sprite_ext(spr_block_1,0,x,y-margin*(hudTimer/maxTimer),1*(hudTimer/maxTimer),1*(hudTimer/maxTimer),0,-1,1);
       if unlocked2 then draw_sprite_ext(spr_block_2,0,x+margin*(hudTimer/maxTimer),y,1*(hudTimer/maxTimer),1*(hudTimer/maxTimer),0,-1,1);
       if unlocked3 then draw_sprite_ext(spr_block_3,0,x,y+margin*(hudTimer/maxTimer),1*(hudTimer/maxTimer),1*(hudTimer/maxTimer),0,-1,1);
       if unlocked4 then draw_sprite_ext(spr_block_4,0,x-margin*(hudTimer/maxTimer),y,1*(hudTimer/maxTimer),1*(hudTimer/maxTimer),0,-1,1);
       
       //Drawing des ausgewählten blockes   
       /*
       switch (mouseArea)
           {
           case 0: if unlocked1 then draw_sprite_ext(spr_block_select,1,x,y,1*hudTimer,1*hudTimer,0,-1,1) break;
           case 1: if unlocked2 then draw_sprite_ext(spr_block_select,1,x,y,1*hudTimer,1*hudTimer,270,-1,1) break;
           case 2: if unlocked3 then draw_sprite_ext(spr_block_select,1,x,y,1*hudTimer,1*hudTimer,180,-1,1) break;
           case 3: if unlocked4 then draw_sprite_ext(spr_block_select,1,x,y,1*hudTimer,1*hudTimer,90,-1,1) break;
           } 
       */
       
       switch (mouseArea)
           {
           case 0: if unlocked1 then color = make_color_rgb(0,255,255); break;
           case 1: if unlocked2 then color = make_color_rgb(255,100,100) break;
           case 2: if unlocked3 then color = make_color_rgb(255,255,100) break;
           case 3: if unlocked4 then color = make_color_rgb(61,255,77) break;
           default : color = c_white;
           }
       
       mousedir = point_direction(x, y, mouse_x, mouse_y);
       draw_sprite_ext(spr_block_select,2,x,y,1*hudTimer,1*hudTimer,mousedir,color,1);
    }
    
draw_text (x,y+33,place_meeting(x,y,all));
draw_text (x,y+48,un_left_pressed);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
