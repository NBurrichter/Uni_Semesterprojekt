<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize Variables
//Disable the Application Surface
application_surface_draw_enable(false);
surface_resize(application_surface,view_wview,view_hview)

///set initial scale
scale=1
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}

///New Smart-Interpolation Feature
global.interpolation=false
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Magical Interpolation by tizzio on the GMC

//disable automatic application surface draw
application_surface_draw_enable(false);

//display size
screen_w = display_get_width();
screen_h = display_get_height();

//actual application surface size
app_w = view_wview[0]
app_h = view_hview[0]

//rounded scalint for pixel perfect
app_xscal = ceil(screen_w / app_w);
app_yscal = ceil(screen_h / app_h);

//up-scaled surface 
screen_sur = surface_create(app_w * app_xscal, app_h * app_yscal);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scaleprevious=scale
///Picking Scales and Fullscreen Toggle
if keyboard_check_pressed(ord("0"))
{
/////Toggle Fullscreen
    if window_get_fullscreen()
    {
        window_set_fullscreen(false)
        window_set_size(view_wview*scale,view_hview*scale)
        }
        else
        {
         window_set_fullscreen(true)
     }
      window_set_size(view_wview*scale,view_hview*scale)
}
//New Smart-Interpolation by Tizzy
if keyboard_check_pressed(ord("9"))
{
window_set_fullscreen(true)
global.interpolation=true
}
////Scales 1 through 5 below
if keyboard_check_pressed(ord("1"))
{
scale=1;
global.interpolation=false
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
/*view_wport = view_wview*scale;
view_hport = view_hview*scale;*/
}
}

if keyboard_check_pressed(ord("2"))
{
scale=2;
global.interpolation=false
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}
}

if keyboard_check_pressed(ord("3"))
{
scale=3;
global.interpolation=false
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}
}

if keyboard_check_pressed(ord("4"))
{
scale=4;
global.interpolation=false
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}
}

if keyboard_check_pressed(ord("5"))
{
scale=5;
global.interpolation=false
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}
}

if keyboard_check_pressed(ord("6"))
{
scale=6;
global.interpolation=false
if !window_get_fullscreen()
{
window_set_size(view_wview*scale,view_hview*scale)
}
}
if scale!=scaleprevious
{
window_set_size(view_wview*scale,view_hview*scale)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////This is the important part here. This uses the new application_surface!
draw_surface_ext(application_surface,(window_get_width()/2)-((view_wview*scale)/2),(window_get_height()/2)-((view_hview*scale)/2) ,scale,scale,0,c_white,1)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Magical Interpolation by tizzio on the GMC

//turn off texture interpolation
texture_set_interpolation(false);

if global.interpolation=true
{
if window_get_fullscreen()
    {
    //display size
    screen_w = display_get_width();
    screen_h = display_get_height();
    }
        else
        {
        //display size
        screen_w = window_get_width();
        screen_h = window_get_height();
        }
  
//recreate the surface if not exists
if(!surface_exists(screen_sur))
    screen_sur = surface_create(app_w * app_xscal, app_h * app_yscal);


//render on the upscaled surface
surface_set_target(screen_sur);
draw_surface_ext(application_surface, 0, 0, app_xscal, app_yscal, 0, -1, 1);
surface_reset_target();

//draw the big surface stretched fit the screen
texture_set_interpolation(true);
draw_surface_stretched(screen_sur, 0, 0, screen_w, screen_h);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
