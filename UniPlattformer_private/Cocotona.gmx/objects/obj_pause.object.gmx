<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///prepare pause menu

//next frame game gets paused
alarm[0] = 1;

//this will be the surface
surf_pause = surface_create(view_wview[0],view_hview[0])

//destroy second player
with (obj_second_player)
    {
    instance_destroy ();
    }
    
with (obj_game_controller)
    {
    instance_destroy ();
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables for pause_menu

pause_menu_selected = 1;

// position Pause menu heading

pause_menu_x_position = view_xview[0] + view_wview[0]/2;
pause_menu_y_position = view_yview[0] + view_hview[0]/4;

// position Resume button

resume_x_position = view_xview[0] + view_wview[0]/2;
resume_y_position = view_yview[0] + (view_hview[0]/5)*2;

// position Restart button

restart_x_position = view_xview[0] + view_wview[0]/2;
restart_y_position = view_yview[0] + (view_hview[0]/5)*3;

// position Exit button 

exit_x_position = view_xview[0] + view_wview[0]/2;
exit_y_position = view_yview[0] + (view_hview[0]/5)*4;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the backbground surface

surface_set_target(surf_pause);
draw_clear_alpha(c_black,0); // Clears surface.
draw_enable_alphablend(true);
draw_surface(application_surface,0,0);
draw_enable_alphablend(true);

draw_set_colour (c_black);
draw_set_alpha (0.5);
draw_rectangle (0, 0, view_wview [0], view_hview[0], 0);
draw_set_alpha (1);
//draw_rectangle (view_xview [0], view_yview [0], view_xview[0] + view_wview[0], view_yview + view_hview [0], 0);

surface_reset_target();

instance_deactivate_all(true); //deactivate all other instances
instance_activate_object(obj_camera_controller)
audio_pause_all ();
audio_play_sound (snd_click,1,false);
global.pause = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///if background surface got lost
if global.pause = true
    then
    {
    if !(surface_exists(surf_pause))
        then
        {
        draw_enable_alphablend(true);
        instance_activate_all();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause menu

var pause_button = keyboard_check_pressed(ord('P')); 

var left_key = keyboard_check_pressed(ord('A'))          
var right_key = keyboard_check_pressed(ord('D'))        

var jump_key_just_pressed = keyboard_check_pressed(vk_space)

//control pause_menu_selected via mouse

if pause_menu_selected != 1
&amp;&amp; point_in_rectangle(mouse_x, mouse_y, resume_x_position-(sprite_get_width(spr_button)/2), resume_y_position-(sprite_get_height(spr_button)/2),
                                        resume_x_position+(sprite_get_width(spr_button)/2), resume_y_position+(sprite_get_height(spr_button)/2))
    then
    {
    pause_menu_selected = 1;
    audio_play_sound (snd_levelclick,1,false);
    }
else
    {
    if pause_menu_selected != 2
    &amp;&amp; point_in_rectangle(mouse_x, mouse_y,     restart_x_position-(sprite_get_width(spr_button)/2), restart_y_position-(sprite_get_height(spr_button)/2),
                                                restart_x_position+(sprite_get_width(spr_button)/2), restart_y_position+(sprite_get_height(spr_button)/2))
        then
        {
        pause_menu_selected = 2;
        audio_play_sound (snd_levelclick,1,false);
        }
    else
        {
        if pause_menu_selected != 3
        &amp;&amp; point_in_rectangle(mouse_x, mouse_y, exit_x_position-(sprite_get_width(spr_button)/2), exit_y_position-(sprite_get_height(spr_button)/2),
                                                exit_x_position+(sprite_get_width(spr_button)/2), exit_y_position+(sprite_get_height(spr_button)/2))
            then
            {
            pause_menu_selected = 3;
            audio_play_sound (snd_levelclick,1,false);
            }
        }
    }

//control pause_menu_selected via buttons

if left_key &amp;&amp; pause_menu_selected &gt; 1 
    then 
    {
    pause_menu_selected -= 1;
    audio_play_sound (snd_levelclick,1,false);
    }
if right_key &amp;&amp; pause_menu_selected &lt; 3 
    then 
    {
    pause_menu_selected += 1;
    audio_play_sound (snd_levelclick,1,false);
    }
    
//unpause

if jump_key_just_pressed or mouse_check_button_pressed(mb_left)
    then
    {
    switch (pause_menu_selected)
        {
        case 1:    
            surface_free (surf_pause);
            draw_enable_alphablend(true);
            global.pause = false;
            instance_activate_all(); //Activate all the objects
            audio_resume_all ();
            audio_play_sound (snd_click,1,false);
            instance_create (mouse_x, mouse_y, obj_second_player);
            instance_create (mouse_x, mouse_y, obj_game_controller);
            instance_destroy();
            break;
            
        case 2:
            instance_activate_all(); //Activate all the objects
            audio_resume_all();
            audio_play_sound (snd_click,1,false);
            room_restart();
            break;
  
        case 3:
            instance_activate_all(); //Activate all the objects
            audio_play_sound (snd_cancel,1,false);
            room_goto (room_level_select);
            break;
        }
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear background surface

surface_free(surf_pause);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the background surface

if global.pause = true
    then
    {
    if(surface_exists(surf_pause))
        then
        {
        draw_enable_alphablend(false);
        draw_surface(surf_pause, view_xview[0], view_yview[0]);
        draw_enable_alphablend(true);
        } 
    else 
        {
        surf_pause = surface_create(view_wview[0], view_hview[0]);
        alarm[0] = 1;
        }
    }



    


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debugging
/*
draw_set_halign(fa_left);
draw_text (30,30,"view_wview: " +string(view_wview));
draw_text (30,45,"screen_width: " +string(screen_width));
draw_text (30,60,"view_wport: " +string(view_wport));
draw_text (30,75,"application_surface: " +string(surface_get_width(application_surface)));

if surface_exists (surf_pause)
    then
draw_text (30,90,"surf_pause: " +string(surface_get_width(surf_pause)));

draw_text (30,105,"view_xview: " +string(view_xview));
draw_text (30,120,"gui_width: " +string(display_get_gui_width()));

draw_text (30,135,"pause_menu_selected: " +string(pause_menu_selected));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw pause menu buttons

draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_color (c_black);

// draw headline

draw_text (pause_menu_x_position, pause_menu_y_position, "PAUSE MENU")

// resume button
if pause_menu_selected = 1
    then
    {
    draw_sprite (spr_button, 1, resume_x_position, resume_y_position);
    }
else
    {
    draw_sprite (spr_button, 0, resume_x_position, resume_y_position);
    }
    
draw_text (resume_x_position, resume_y_position, "RESUME")
    
// restart button    
if pause_menu_selected = 2
    then
    {
    draw_sprite (spr_button, 1, restart_x_position, restart_y_position);
    }
else
    {
    draw_sprite (spr_button, 0, restart_x_position, restart_y_position);
    }
    
draw_text (restart_x_position, restart_y_position, "RESTART")
    
// exit button    
if pause_menu_selected = 3
    then
    {
    draw_sprite (spr_button, 1, exit_x_position, exit_y_position);
    }
else
    {
    draw_sprite (spr_button, 0, exit_x_position, exit_y_position);
    }
    
draw_text (exit_x_position, exit_y_position, "EXIT")

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw mouse cursor

if global.pause = true
    then
    {
    draw_sprite (spr_playertwo, -1, mouse_x, mouse_y);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
